import seaborn as sns
import matplotlib.pyplot as plt

def predict(X, param):
    """Predicts the target values given the input data and the learned parameters."""
    return x*param[1] + param[0]

def mean_squared_error(y_pred, y_true):
    """Computes the mean squared error between the predicted and true target values."""
    return sum((y_true-y_pred)**2)/len(y_pred)

def plot_regression_line(X, y, param):
    """Plots the regression line and the scatter plot of the data."""
    sns.regplot(x = X, y = y, data = param)
    
def gradient_descent(X, y, params, learning_rate, num_iterations):
    m = len (y)

    threshold = 0.00000001
    costs = []
    prev_cost = float('inf')
    curr_cost = 0
    
    for i in range(num_iterations):
        y_pred = predict (X, params)
        curr_cost = mean_squared_error (y_pred, y)
        if abs (prev_cost - curr_cost) <= threshold:
            break
        costs.append(curr_cost)
        
        diff = np.subtract(y_pred, y)
        derivative = (2 * learning_rate/ m) * np.dot(X.T, diff)
        params = params - derivative
   
    return params, costs